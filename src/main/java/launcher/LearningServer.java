package launcher; /**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-12")
public class LearningServer {

  public interface Iface {

    public void load(String file_name) throws TException;

    public void save(String file_name) throws TException;

    public void learning(List<List<Double>> result, List<List<Short>> board) throws TException;

    public List<List<Double>> get(List<List<Short>> board) throws TException;

    public List<List<List<Double>>> getWeight() throws TException;

    public List<List<Double>> getBiase() throws TException;

    public void learningPhase2(List<List<Double>> result, List<List<Short>> board) throws TException;

    public void initial() throws TException;

  }

  public interface AsyncIface {

    public void load(String file_name, AsyncMethodCallback resultHandler) throws TException;

    public void save(String file_name, AsyncMethodCallback resultHandler) throws TException;

    public void learning(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException;

    public void get(List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException;

    public void getWeight(AsyncMethodCallback resultHandler) throws TException;

    public void getBiase(AsyncMethodCallback resultHandler) throws TException;

    public void learningPhase2(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException;

    public void initial(AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void load(String file_name) throws TException
    {
      send_load(file_name);
      recv_load();
    }

    public void send_load(String file_name) throws TException
    {
      load_args args = new load_args();
      args.setFile_name(file_name);
      sendBase("load", args);
    }

    public void recv_load() throws TException
    {
      load_result result = new load_result();
      receiveBase(result, "load");
      return;
    }

    public void save(String file_name) throws TException
    {
      send_save(file_name);
      recv_save();
    }

    public void send_save(String file_name) throws TException
    {
      save_args args = new save_args();
      args.setFile_name(file_name);
      sendBase("save", args);
    }

    public void recv_save() throws TException
    {
      save_result result = new save_result();
      receiveBase(result, "save");
      return;
    }

    public void learning(List<List<Double>> result, List<List<Short>> board) throws TException
    {
      send_learning(result, board);
      recv_learning();
    }

    public void send_learning(List<List<Double>> result, List<List<Short>> board) throws TException
    {
      learning_args args = new learning_args();
      args.setResult(result);
      args.setBoard(board);
      sendBase("learning", args);
    }

    public void recv_learning() throws TException
    {
      learning_result result = new learning_result();
      receiveBase(result, "learning");
      return;
    }

    public List<List<Double>> get(List<List<Short>> board) throws TException
    {
      send_get(board);
      return recv_get();
    }

    public void send_get(List<List<Short>> board) throws TException
    {
      get_args args = new get_args();
      args.setBoard(board);
      sendBase("get", args);
    }

    public List<List<Double>> recv_get() throws TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public List<List<List<Double>>> getWeight() throws TException
    {
      send_getWeight();
      return recv_getWeight();
    }

    public void send_getWeight() throws TException
    {
      getWeight_args args = new getWeight_args();
      sendBase("getWeight", args);
    }

    public List<List<List<Double>>> recv_getWeight() throws TException
    {
      getWeight_result result = new getWeight_result();
      receiveBase(result, "getWeight");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWeight failed: unknown result");
    }

    public List<List<Double>> getBiase() throws TException
    {
      send_getBiase();
      return recv_getBiase();
    }

    public void send_getBiase() throws TException
    {
      getBiase_args args = new getBiase_args();
      sendBase("getBiase", args);
    }

    public List<List<Double>> recv_getBiase() throws TException
    {
      getBiase_result result = new getBiase_result();
      receiveBase(result, "getBiase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBiase failed: unknown result");
    }

    public void learningPhase2(List<List<Double>> result, List<List<Short>> board) throws TException
    {
      send_learningPhase2(result, board);
      recv_learningPhase2();
    }

    public void send_learningPhase2(List<List<Double>> result, List<List<Short>> board) throws TException
    {
      learningPhase2_args args = new learningPhase2_args();
      args.setResult(result);
      args.setBoard(board);
      sendBase("learningPhase2", args);
    }

    public void recv_learningPhase2() throws TException
    {
      learningPhase2_result result = new learningPhase2_result();
      receiveBase(result, "learningPhase2");
      return;
    }

    public void initial() throws TException
    {
      send_initial();
      recv_initial();
    }

    public void send_initial() throws TException
    {
      initial_args args = new initial_args();
      sendBase("initial", args);
    }

    public void recv_initial() throws TException
    {
      initial_result result = new initial_result();
      receiveBase(result, "initial");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void load(String file_name, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      load_call method_call = new load_call(file_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class load_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file_name;
      public load_call(String file_name, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file_name = file_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("load", org.apache.thrift.protocol.TMessageType.CALL, 0));
        load_args args = new load_args();
        args.setFile_name(file_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_load();
      }
    }

    public void save(String file_name, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      save_call method_call = new save_call(file_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class save_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String file_name;
      public save_call(String file_name, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.file_name = file_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("save", org.apache.thrift.protocol.TMessageType.CALL, 0));
        save_args args = new save_args();
        args.setFile_name(file_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_save();
      }
    }

    public void learning(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      learning_call method_call = new learning_call(result, board, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class learning_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Double>> result;
      private List<List<Short>> board;
      public learning_call(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.result = result;
        this.board = board;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("learning", org.apache.thrift.protocol.TMessageType.CALL, 0));
        learning_args args = new learning_args();
        args.setResult(result);
        args.setBoard(board);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_learning();
      }
    }

    public void get(List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      get_call method_call = new get_call(board, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Short>> board;
      public get_call(List<List<Short>> board, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.board = board;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setBoard(board);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Double>> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void getWeight(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getWeight_call method_call = new getWeight_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWeight_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWeight_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWeight", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWeight_args args = new getWeight_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<List<Double>>> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWeight();
      }
    }

    public void getBiase(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      getBiase_call method_call = new getBiase_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBiase_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getBiase_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBiase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBiase_args args = new getBiase_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<Double>> getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBiase();
      }
    }

    public void learningPhase2(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      learningPhase2_call method_call = new learningPhase2_call(result, board, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class learningPhase2_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<List<Double>> result;
      private List<List<Short>> board;
      public learningPhase2_call(List<List<Double>> result, List<List<Short>> board, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.result = result;
        this.board = board;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("learningPhase2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        learningPhase2_args args = new learningPhase2_args();
        args.setResult(result);
        args.setBoard(board);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_learningPhase2();
      }
    }

    public void initial(AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      initial_call method_call = new initial_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class initial_call extends org.apache.thrift.async.TAsyncMethodCall {
      public initial_call(AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("initial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        initial_args args = new initial_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_initial();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("load", new load());
      processMap.put("save", new save());
      processMap.put("learning", new learning());
      processMap.put("get", new get());
      processMap.put("getWeight", new getWeight());
      processMap.put("getBiase", new getBiase());
      processMap.put("learningPhase2", new learningPhase2());
      processMap.put("initial", new initial());
      return processMap;
    }

    public static class load<I extends Iface> extends org.apache.thrift.ProcessFunction<I, load_args> {
      public load() {
        super("load");
      }

      public load_args getEmptyArgsInstance() {
        return new load_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public load_result getResult(I iface, load_args args) throws TException {
        load_result result = new load_result();
        iface.load(args.file_name);
        return result;
      }
    }

    public static class save<I extends Iface> extends org.apache.thrift.ProcessFunction<I, save_args> {
      public save() {
        super("save");
      }

      public save_args getEmptyArgsInstance() {
        return new save_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public save_result getResult(I iface, save_args args) throws TException {
        save_result result = new save_result();
        iface.save(args.file_name);
        return result;
      }
    }

    public static class learning<I extends Iface> extends org.apache.thrift.ProcessFunction<I, learning_args> {
      public learning() {
        super("learning");
      }

      public learning_args getEmptyArgsInstance() {
        return new learning_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public learning_result getResult(I iface, learning_args args) throws TException {
        learning_result result = new learning_result();
        iface.learning(args.result, args.board);
        return result;
      }
    }

    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws TException {
        get_result result = new get_result();
        result.success = iface.get(args.board);
        return result;
      }
    }

    public static class getWeight<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWeight_args> {
      public getWeight() {
        super("getWeight");
      }

      public getWeight_args getEmptyArgsInstance() {
        return new getWeight_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWeight_result getResult(I iface, getWeight_args args) throws TException {
        getWeight_result result = new getWeight_result();
        result.success = iface.getWeight();
        return result;
      }
    }

    public static class getBiase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBiase_args> {
      public getBiase() {
        super("getBiase");
      }

      public getBiase_args getEmptyArgsInstance() {
        return new getBiase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBiase_result getResult(I iface, getBiase_args args) throws TException {
        getBiase_result result = new getBiase_result();
        result.success = iface.getBiase();
        return result;
      }
    }

    public static class learningPhase2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, learningPhase2_args> {
      public learningPhase2() {
        super("learningPhase2");
      }

      public learningPhase2_args getEmptyArgsInstance() {
        return new learningPhase2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public learningPhase2_result getResult(I iface, learningPhase2_args args) throws TException {
        learningPhase2_result result = new learningPhase2_result();
        iface.learningPhase2(args.result, args.board);
        return result;
      }
    }

    public static class initial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, initial_args> {
      public initial() {
        super("initial");
      }

      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public initial_result getResult(I iface, initial_args args) throws TException {
        initial_result result = new initial_result();
        iface.initial();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("load", new load());
      processMap.put("save", new save());
      processMap.put("learning", new learning());
      processMap.put("get", new get());
      processMap.put("getWeight", new getWeight());
      processMap.put("getBiase", new getBiase());
      processMap.put("learningPhase2", new learningPhase2());
      processMap.put("initial", new initial());
      return processMap;
    }

    public static class load<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, load_args, Void> {
      public load() {
        super("load");
      }

      public load_args getEmptyArgsInstance() {
        return new load_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            load_result result = new load_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            load_result result = new load_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, load_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.load(args.file_name,resultHandler);
      }
    }

    public static class save<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, save_args, Void> {
      public save() {
        super("save");
      }

      public save_args getEmptyArgsInstance() {
        return new save_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            save_result result = new save_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            save_result result = new save_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, save_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.save(args.file_name,resultHandler);
      }
    }

    public static class learning<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, learning_args, Void> {
      public learning() {
        super("learning");
      }

      public learning_args getEmptyArgsInstance() {
        return new learning_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            learning_result result = new learning_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            learning_result result = new learning_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, learning_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.learning(args.result, args.board,resultHandler);
      }
    }

    public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, List<List<Double>>> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      public AsyncMethodCallback<List<List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Double>>>() { 
          public void onComplete(List<List<Double>> o) {
            get_result result = new get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_result result = new get_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_args args, AsyncMethodCallback<List<List<Double>>> resultHandler) throws TException {
        iface.get(args.board,resultHandler);
      }
    }

    public static class getWeight<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWeight_args, List<List<List<Double>>>> {
      public getWeight() {
        super("getWeight");
      }

      public getWeight_args getEmptyArgsInstance() {
        return new getWeight_args();
      }

      public AsyncMethodCallback<List<List<List<Double>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<List<Double>>>>() { 
          public void onComplete(List<List<List<Double>>> o) {
            getWeight_result result = new getWeight_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWeight_result result = new getWeight_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWeight_args args, AsyncMethodCallback<List<List<List<Double>>>> resultHandler) throws TException {
        iface.getWeight(resultHandler);
      }
    }

    public static class getBiase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBiase_args, List<List<Double>>> {
      public getBiase() {
        super("getBiase");
      }

      public getBiase_args getEmptyArgsInstance() {
        return new getBiase_args();
      }

      public AsyncMethodCallback<List<List<Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<List<Double>>>() { 
          public void onComplete(List<List<Double>> o) {
            getBiase_result result = new getBiase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBiase_result result = new getBiase_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBiase_args args, AsyncMethodCallback<List<List<Double>>> resultHandler) throws TException {
        iface.getBiase(resultHandler);
      }
    }

    public static class learningPhase2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, learningPhase2_args, Void> {
      public learningPhase2() {
        super("learningPhase2");
      }

      public learningPhase2_args getEmptyArgsInstance() {
        return new learningPhase2_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            learningPhase2_result result = new learningPhase2_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            learningPhase2_result result = new learningPhase2_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, learningPhase2_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.learningPhase2(args.result, args.board,resultHandler);
      }
    }

    public static class initial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, initial_args, Void> {
      public initial() {
        super("initial");
      }

      public initial_args getEmptyArgsInstance() {
        return new initial_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            initial_result result = new initial_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            initial_result result = new initial_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, initial_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.initial(resultHandler);
      }
    }

  }

  public static class load_args implements org.apache.thrift.TBase<load_args, load_args._Fields>, java.io.Serializable, Cloneable, Comparable<load_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("load_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new load_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new load_argsTupleSchemeFactory());
    }

    public String file_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "file_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(load_args.class, metaDataMap);
    }

    public load_args() {
    }

    public load_args(
      String file_name)
    {
      this();
      this.file_name = file_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public load_args(load_args other) {
      if (other.isSetFile_name()) {
        this.file_name = other.file_name;
      }
    }

    public load_args deepCopy() {
      return new load_args(this);
    }

    @Override
    public void clear() {
      this.file_name = null;
    }

    public String getFile_name() {
      return this.file_name;
    }

    public load_args setFile_name(String file_name) {
      this.file_name = file_name;
      return this;
    }

    public void unsetFile_name() {
      this.file_name = null;
    }

    /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_name() {
      return this.file_name != null;
    }

    public void setFile_nameIsSet(boolean value) {
      if (!value) {
        this.file_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFile_name();
        } else {
          setFile_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFile_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFile_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof load_args)
        return this.equals((load_args)that);
      return false;
    }

    public boolean equals(load_args that) {
      if (that == null)
        return false;

      boolean this_present_file_name = true && this.isSetFile_name();
      boolean that_present_file_name = true && that.isSetFile_name();
      if (this_present_file_name || that_present_file_name) {
        if (!(this_present_file_name && that_present_file_name))
          return false;
        if (!this.file_name.equals(that.file_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_file_name = true && (isSetFile_name());
      list.add(present_file_name);
      if (present_file_name)
        list.add(file_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(load_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("load_args(");
      boolean first = true;

      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class load_argsStandardSchemeFactory implements SchemeFactory {
      public load_argsStandardScheme getScheme() {
        return new load_argsStandardScheme();
      }
    }

    private static class load_argsStandardScheme extends StandardScheme<load_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, load_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file_name = iprot.readString();
                struct.setFile_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, load_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file_name != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class load_argsTupleSchemeFactory implements SchemeFactory {
      public load_argsTupleScheme getScheme() {
        return new load_argsTupleScheme();
      }
    }

    private static class load_argsTupleScheme extends TupleScheme<load_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, load_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFile_name()) {
          oprot.writeString(struct.file_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, load_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.file_name = iprot.readString();
          struct.setFile_nameIsSet(true);
        }
      }
    }

  }

  public static class load_result implements org.apache.thrift.TBase<load_result, load_result._Fields>, java.io.Serializable, Cloneable, Comparable<load_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("load_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new load_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new load_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(load_result.class, metaDataMap);
    }

    public load_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public load_result(load_result other) {
    }

    public load_result deepCopy() {
      return new load_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof load_result)
        return this.equals((load_result)that);
      return false;
    }

    public boolean equals(load_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(load_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("load_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class load_resultStandardSchemeFactory implements SchemeFactory {
      public load_resultStandardScheme getScheme() {
        return new load_resultStandardScheme();
      }
    }

    private static class load_resultStandardScheme extends StandardScheme<load_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, load_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, load_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class load_resultTupleSchemeFactory implements SchemeFactory {
      public load_resultTupleScheme getScheme() {
        return new load_resultTupleScheme();
      }
    }

    private static class load_resultTupleScheme extends TupleScheme<load_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, load_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, load_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class save_args implements org.apache.thrift.TBase<save_args, save_args._Fields>, java.io.Serializable, Cloneable, Comparable<save_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("save_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new save_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new save_argsTupleSchemeFactory());
    }

    public String file_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "file_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(save_args.class, metaDataMap);
    }

    public save_args() {
    }

    public save_args(
      String file_name)
    {
      this();
      this.file_name = file_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public save_args(save_args other) {
      if (other.isSetFile_name()) {
        this.file_name = other.file_name;
      }
    }

    public save_args deepCopy() {
      return new save_args(this);
    }

    @Override
    public void clear() {
      this.file_name = null;
    }

    public String getFile_name() {
      return this.file_name;
    }

    public save_args setFile_name(String file_name) {
      this.file_name = file_name;
      return this;
    }

    public void unsetFile_name() {
      this.file_name = null;
    }

    /** Returns true if field file_name is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_name() {
      return this.file_name != null;
    }

    public void setFile_nameIsSet(boolean value) {
      if (!value) {
        this.file_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFile_name();
        } else {
          setFile_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFile_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFile_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof save_args)
        return this.equals((save_args)that);
      return false;
    }

    public boolean equals(save_args that) {
      if (that == null)
        return false;

      boolean this_present_file_name = true && this.isSetFile_name();
      boolean that_present_file_name = true && that.isSetFile_name();
      if (this_present_file_name || that_present_file_name) {
        if (!(this_present_file_name && that_present_file_name))
          return false;
        if (!this.file_name.equals(that.file_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_file_name = true && (isSetFile_name());
      list.add(present_file_name);
      if (present_file_name)
        list.add(file_name);

      return list.hashCode();
    }

    @Override
    public int compareTo(save_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFile_name()).compareTo(other.isSetFile_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name, other.file_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("save_args(");
      boolean first = true;

      sb.append("file_name:");
      if (this.file_name == null) {
        sb.append("null");
      } else {
        sb.append(this.file_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class save_argsStandardSchemeFactory implements SchemeFactory {
      public save_argsStandardScheme getScheme() {
        return new save_argsStandardScheme();
      }
    }

    private static class save_argsStandardScheme extends StandardScheme<save_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, save_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file_name = iprot.readString();
                struct.setFile_nameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, save_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.file_name != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.file_name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class save_argsTupleSchemeFactory implements SchemeFactory {
      public save_argsTupleScheme getScheme() {
        return new save_argsTupleScheme();
      }
    }

    private static class save_argsTupleScheme extends TupleScheme<save_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, save_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFile_name()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFile_name()) {
          oprot.writeString(struct.file_name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, save_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.file_name = iprot.readString();
          struct.setFile_nameIsSet(true);
        }
      }
    }

  }

  public static class save_result implements org.apache.thrift.TBase<save_result, save_result._Fields>, java.io.Serializable, Cloneable, Comparable<save_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("save_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new save_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new save_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(save_result.class, metaDataMap);
    }

    public save_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public save_result(save_result other) {
    }

    public save_result deepCopy() {
      return new save_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof save_result)
        return this.equals((save_result)that);
      return false;
    }

    public boolean equals(save_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(save_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("save_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class save_resultStandardSchemeFactory implements SchemeFactory {
      public save_resultStandardScheme getScheme() {
        return new save_resultStandardScheme();
      }
    }

    private static class save_resultStandardScheme extends StandardScheme<save_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, save_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, save_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class save_resultTupleSchemeFactory implements SchemeFactory {
      public save_resultTupleScheme getScheme() {
        return new save_resultTupleScheme();
      }
    }

    private static class save_resultTupleScheme extends TupleScheme<save_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, save_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, save_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class learning_args implements org.apache.thrift.TBase<learning_args, learning_args._Fields>, java.io.Serializable, Cloneable, Comparable<learning_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learning_args");

    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learning_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learning_argsTupleSchemeFactory());
    }

    public List<List<Double>> result; // required
    public List<List<Short>> board; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESULT((short)1, "result"),
      BOARD((short)2, "board");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESULT
            return RESULT;
          case 2: // BOARD
            return BOARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learning_args.class, metaDataMap);
    }

    public learning_args() {
    }

    public learning_args(
      List<List<Double>> result,
      List<List<Short>> board)
    {
      this();
      this.result = result;
      this.board = board;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learning_args(learning_args other) {
      if (other.isSetResult()) {
        List<List<Double>> __this__result = new ArrayList<List<Double>>(other.result.size());
        for (List<Double> other_element : other.result) {
          List<Double> __this__result_copy = new ArrayList<Double>(other_element);
          __this__result.add(__this__result_copy);
        }
        this.result = __this__result;
      }
      if (other.isSetBoard()) {
        List<List<Short>> __this__board = new ArrayList<List<Short>>(other.board.size());
        for (List<Short> other_element : other.board) {
          List<Short> __this__board_copy = new ArrayList<Short>(other_element);
          __this__board.add(__this__board_copy);
        }
        this.board = __this__board;
      }
    }

    public learning_args deepCopy() {
      return new learning_args(this);
    }

    @Override
    public void clear() {
      this.result = null;
      this.board = null;
    }

    public int getResultSize() {
      return (this.result == null) ? 0 : this.result.size();
    }

    public java.util.Iterator<List<Double>> getResultIterator() {
      return (this.result == null) ? null : this.result.iterator();
    }

    public void addToResult(List<Double> elem) {
      if (this.result == null) {
        this.result = new ArrayList<List<Double>>();
      }
      this.result.add(elem);
    }

    public List<List<Double>> getResult() {
      return this.result;
    }

    public learning_args setResult(List<List<Double>> result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    public int getBoardSize() {
      return (this.board == null) ? 0 : this.board.size();
    }

    public java.util.Iterator<List<Short>> getBoardIterator() {
      return (this.board == null) ? null : this.board.iterator();
    }

    public void addToBoard(List<Short> elem) {
      if (this.board == null) {
        this.board = new ArrayList<List<Short>>();
      }
      this.board.add(elem);
    }

    public List<List<Short>> getBoard() {
      return this.board;
    }

    public learning_args setBoard(List<List<Short>> board) {
      this.board = board;
      return this;
    }

    public void unsetBoard() {
      this.board = null;
    }

    /** Returns true if field board is set (has been assigned a value) and false otherwise */
    public boolean isSetBoard() {
      return this.board != null;
    }

    public void setBoardIsSet(boolean value) {
      if (!value) {
        this.board = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((List<List<Double>>)value);
        }
        break;

      case BOARD:
        if (value == null) {
          unsetBoard();
        } else {
          setBoard((List<List<Short>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESULT:
        return getResult();

      case BOARD:
        return getBoard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESULT:
        return isSetResult();
      case BOARD:
        return isSetBoard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learning_args)
        return this.equals((learning_args)that);
      return false;
    }

    public boolean equals(learning_args that) {
      if (that == null)
        return false;

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_board = true && this.isSetBoard();
      boolean that_present_board = true && that.isSetBoard();
      if (this_present_board || that_present_board) {
        if (!(this_present_board && that_present_board))
          return false;
        if (!this.board.equals(that.board))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_result = true && (isSetResult());
      list.add(present_result);
      if (present_result)
        list.add(result);

      boolean present_board = true && (isSetBoard());
      list.add(present_board);
      if (present_board)
        list.add(board);

      return list.hashCode();
    }

    @Override
    public int compareTo(learning_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBoard()).compareTo(other.isSetBoard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, other.board);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learning_args(");
      boolean first = true;

      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("board:");
      if (this.board == null) {
        sb.append("null");
      } else {
        sb.append(this.board);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learning_argsStandardSchemeFactory implements SchemeFactory {
      public learning_argsStandardScheme getScheme() {
        return new learning_argsStandardScheme();
      }
    }

    private static class learning_argsStandardScheme extends StandardScheme<learning_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learning_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.result = new ArrayList<List<Double>>(_list0.size);
                  List<Double> _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    {
                      org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                      _elem1 = new ArrayList<Double>(_list3.size);
                      double _elem4;
                      for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                      {
                        _elem4 = iprot.readDouble();
                        _elem1.add(_elem4);
                      }
                      iprot.readListEnd();
                    }
                    struct.result.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOARD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.board = new ArrayList<List<Short>>(_list6.size);
                  List<Short> _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    {
                      org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                      _elem7 = new ArrayList<Short>(_list9.size);
                      short _elem10;
                      for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                      {
                        _elem10 = iprot.readI16();
                        _elem7.add(_elem10);
                      }
                      iprot.readListEnd();
                    }
                    struct.board.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setBoardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learning_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.result.size()));
            for (List<Double> _iter12 : struct.result)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter12.size()));
                for (double _iter13 : _iter12)
                {
                  oprot.writeDouble(_iter13);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.board != null) {
          oprot.writeFieldBegin(BOARD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.board.size()));
            for (List<Short> _iter14 : struct.board)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, _iter14.size()));
                for (short _iter15 : _iter14)
                {
                  oprot.writeI16(_iter15);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learning_argsTupleSchemeFactory implements SchemeFactory {
      public learning_argsTupleScheme getScheme() {
        return new learning_argsTupleScheme();
      }
    }

    private static class learning_argsTupleScheme extends TupleScheme<learning_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learning_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResult()) {
          optionals.set(0);
        }
        if (struct.isSetBoard()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResult()) {
          {
            oprot.writeI32(struct.result.size());
            for (List<Double> _iter16 : struct.result)
            {
              {
                oprot.writeI32(_iter16.size());
                for (double _iter17 : _iter16)
                {
                  oprot.writeDouble(_iter17);
                }
              }
            }
          }
        }
        if (struct.isSetBoard()) {
          {
            oprot.writeI32(struct.board.size());
            for (List<Short> _iter18 : struct.board)
            {
              {
                oprot.writeI32(_iter18.size());
                for (short _iter19 : _iter18)
                {
                  oprot.writeI16(_iter19);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learning_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.result = new ArrayList<List<Double>>(_list20.size);
            List<Double> _elem21;
            for (int _i22 = 0; _i22 < _list20.size; ++_i22)
            {
              {
                org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem21 = new ArrayList<Double>(_list23.size);
                double _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readDouble();
                  _elem21.add(_elem24);
                }
              }
              struct.result.add(_elem21);
            }
          }
          struct.setResultIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.board = new ArrayList<List<Short>>(_list26.size);
            List<Short> _elem27;
            for (int _i28 = 0; _i28 < _list26.size; ++_i28)
            {
              {
                org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                _elem27 = new ArrayList<Short>(_list29.size);
                short _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = iprot.readI16();
                  _elem27.add(_elem30);
                }
              }
              struct.board.add(_elem27);
            }
          }
          struct.setBoardIsSet(true);
        }
      }
    }

  }

  public static class learning_result implements org.apache.thrift.TBase<learning_result, learning_result._Fields>, java.io.Serializable, Cloneable, Comparable<learning_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learning_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learning_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learning_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learning_result.class, metaDataMap);
    }

    public learning_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learning_result(learning_result other) {
    }

    public learning_result deepCopy() {
      return new learning_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learning_result)
        return this.equals((learning_result)that);
      return false;
    }

    public boolean equals(learning_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(learning_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learning_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learning_resultStandardSchemeFactory implements SchemeFactory {
      public learning_resultStandardScheme getScheme() {
        return new learning_resultStandardScheme();
      }
    }

    private static class learning_resultStandardScheme extends StandardScheme<learning_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learning_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learning_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learning_resultTupleSchemeFactory implements SchemeFactory {
      public learning_resultTupleScheme getScheme() {
        return new learning_resultTupleScheme();
      }
    }

    private static class learning_resultTupleScheme extends TupleScheme<learning_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learning_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learning_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

    private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
    }

    public List<List<Short>> board; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOARD((short)1, "board");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOARD
            return BOARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      List<List<Short>> board)
    {
      this();
      this.board = board;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetBoard()) {
        List<List<Short>> __this__board = new ArrayList<List<Short>>(other.board.size());
        for (List<Short> other_element : other.board) {
          List<Short> __this__board_copy = new ArrayList<Short>(other_element);
          __this__board.add(__this__board_copy);
        }
        this.board = __this__board;
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.board = null;
    }

    public int getBoardSize() {
      return (this.board == null) ? 0 : this.board.size();
    }

    public java.util.Iterator<List<Short>> getBoardIterator() {
      return (this.board == null) ? null : this.board.iterator();
    }

    public void addToBoard(List<Short> elem) {
      if (this.board == null) {
        this.board = new ArrayList<List<Short>>();
      }
      this.board.add(elem);
    }

    public List<List<Short>> getBoard() {
      return this.board;
    }

    public get_args setBoard(List<List<Short>> board) {
      this.board = board;
      return this;
    }

    public void unsetBoard() {
      this.board = null;
    }

    /** Returns true if field board is set (has been assigned a value) and false otherwise */
    public boolean isSetBoard() {
      return this.board != null;
    }

    public void setBoardIsSet(boolean value) {
      if (!value) {
        this.board = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOARD:
        if (value == null) {
          unsetBoard();
        } else {
          setBoard((List<List<Short>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOARD:
        return getBoard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOARD:
        return isSetBoard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_board = true && this.isSetBoard();
      boolean that_present_board = true && that.isSetBoard();
      if (this_present_board || that_present_board) {
        if (!(this_present_board && that_present_board))
          return false;
        if (!this.board.equals(that.board))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_board = true && (isSetBoard());
      list.add(present_board);
      if (present_board)
        list.add(board);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBoard()).compareTo(other.isSetBoard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, other.board);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("board:");
      if (this.board == null) {
        sb.append("null");
      } else {
        sb.append(this.board);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends StandardScheme<get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOARD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.board = new ArrayList<List<Short>>(_list32.size);
                  List<Short> _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    {
                      org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                      _elem33 = new ArrayList<Short>(_list35.size);
                      short _elem36;
                      for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                      {
                        _elem36 = iprot.readI16();
                        _elem33.add(_elem36);
                      }
                      iprot.readListEnd();
                    }
                    struct.board.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setBoardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.board != null) {
          oprot.writeFieldBegin(BOARD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.board.size()));
            for (List<Short> _iter38 : struct.board)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, _iter38.size()));
                for (short _iter39 : _iter38)
                {
                  oprot.writeI16(_iter39);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_argsTupleSchemeFactory implements SchemeFactory {
      public get_argsTupleScheme getScheme() {
        return new get_argsTupleScheme();
      }
    }

    private static class get_argsTupleScheme extends TupleScheme<get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBoard()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBoard()) {
          {
            oprot.writeI32(struct.board.size());
            for (List<Short> _iter40 : struct.board)
            {
              {
                oprot.writeI32(_iter40.size());
                for (short _iter41 : _iter40)
                {
                  oprot.writeI16(_iter41);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.board = new ArrayList<List<Short>>(_list42.size);
            List<Short> _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              {
                org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                _elem43 = new ArrayList<Short>(_list45.size);
                short _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readI16();
                  _elem43.add(_elem46);
                }
              }
              struct.board.add(_elem43);
            }
          }
          struct.setBoardIsSet(true);
        }
      }
    }

  }

  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
    }

    public List<List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      List<List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        List<List<Double>> __this__success = new ArrayList<List<Double>>(other.success.size());
        for (List<Double> other_element : other.success) {
          List<Double> __this__success_copy = new ArrayList<Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Double>>();
      }
      this.success.add(elem);
    }

    public List<List<Double>> getSuccess() {
      return this.success;
    }

    public get_result setSuccess(List<List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends StandardScheme<get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Double>>(_list48.size);
                  List<Double> _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    {
                      org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                      _elem49 = new ArrayList<Double>(_list51.size);
                      double _elem52;
                      for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                      {
                        _elem52 = iprot.readDouble();
                        _elem49.add(_elem52);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Double> _iter54 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter54.size()));
                for (double _iter55 : _iter54)
                {
                  oprot.writeDouble(_iter55);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_resultTupleSchemeFactory implements SchemeFactory {
      public get_resultTupleScheme getScheme() {
        return new get_resultTupleScheme();
      }
    }

    private static class get_resultTupleScheme extends TupleScheme<get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Double> _iter56 : struct.success)
            {
              {
                oprot.writeI32(_iter56.size());
                for (double _iter57 : _iter56)
                {
                  oprot.writeDouble(_iter57);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Double>>(_list58.size);
            List<Double> _elem59;
            for (int _i60 = 0; _i60 < _list58.size; ++_i60)
            {
              {
                org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem59 = new ArrayList<Double>(_list61.size);
                double _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = iprot.readDouble();
                  _elem59.add(_elem62);
                }
              }
              struct.success.add(_elem59);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWeight_args implements org.apache.thrift.TBase<getWeight_args, getWeight_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWeight_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWeight_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWeight_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWeight_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWeight_args.class, metaDataMap);
    }

    public getWeight_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWeight_args(getWeight_args other) {
    }

    public getWeight_args deepCopy() {
      return new getWeight_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWeight_args)
        return this.equals((getWeight_args)that);
      return false;
    }

    public boolean equals(getWeight_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getWeight_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWeight_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWeight_argsStandardSchemeFactory implements SchemeFactory {
      public getWeight_argsStandardScheme getScheme() {
        return new getWeight_argsStandardScheme();
      }
    }

    private static class getWeight_argsStandardScheme extends StandardScheme<getWeight_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWeight_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWeight_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWeight_argsTupleSchemeFactory implements SchemeFactory {
      public getWeight_argsTupleScheme getScheme() {
        return new getWeight_argsTupleScheme();
      }
    }

    private static class getWeight_argsTupleScheme extends TupleScheme<getWeight_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWeight_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWeight_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWeight_result implements org.apache.thrift.TBase<getWeight_result, getWeight_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWeight_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWeight_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWeight_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWeight_resultTupleSchemeFactory());
    }

    public List<List<List<Double>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWeight_result.class, metaDataMap);
    }

    public getWeight_result() {
    }

    public getWeight_result(
      List<List<List<Double>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWeight_result(getWeight_result other) {
      if (other.isSetSuccess()) {
        List<List<List<Double>>> __this__success = new ArrayList<List<List<Double>>>(other.success.size());
        for (List<List<Double>> other_element : other.success) {
          List<List<Double>> __this__success_copy = new ArrayList<List<Double>>(other_element.size());
          for (List<Double> other_element_element : other_element) {
            List<Double> __this__success_copy_copy = new ArrayList<Double>(other_element_element);
            __this__success_copy.add(__this__success_copy_copy);
          }
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getWeight_result deepCopy() {
      return new getWeight_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<List<Double>>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<List<Double>> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<List<Double>>>();
      }
      this.success.add(elem);
    }

    public List<List<List<Double>>> getSuccess() {
      return this.success;
    }

    public getWeight_result setSuccess(List<List<List<Double>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<List<Double>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWeight_result)
        return this.equals((getWeight_result)that);
      return false;
    }

    public boolean equals(getWeight_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWeight_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWeight_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWeight_resultStandardSchemeFactory implements SchemeFactory {
      public getWeight_resultStandardScheme getScheme() {
        return new getWeight_resultStandardScheme();
      }
    }

    private static class getWeight_resultStandardScheme extends StandardScheme<getWeight_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWeight_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<List<List<Double>>>(_list64.size);
                  List<List<Double>> _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    {
                      org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                      _elem65 = new ArrayList<List<Double>>(_list67.size);
                      List<Double> _elem68;
                      for (int _i69 = 0; _i69 < _list67.size; ++_i69)
                      {
                        {
                          org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                          _elem68 = new ArrayList<Double>(_list70.size);
                          double _elem71;
                          for (int _i72 = 0; _i72 < _list70.size; ++_i72)
                          {
                            _elem71 = iprot.readDouble();
                            _elem68.add(_elem71);
                          }
                          iprot.readListEnd();
                        }
                        _elem65.add(_elem68);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWeight_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<List<Double>> _iter73 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter73.size()));
                for (List<Double> _iter74 : _iter73)
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter74.size()));
                    for (double _iter75 : _iter74)
                    {
                      oprot.writeDouble(_iter75);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWeight_resultTupleSchemeFactory implements SchemeFactory {
      public getWeight_resultTupleScheme getScheme() {
        return new getWeight_resultTupleScheme();
      }
    }

    private static class getWeight_resultTupleScheme extends TupleScheme<getWeight_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWeight_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<List<Double>> _iter76 : struct.success)
            {
              {
                oprot.writeI32(_iter76.size());
                for (List<Double> _iter77 : _iter76)
                {
                  {
                    oprot.writeI32(_iter77.size());
                    for (double _iter78 : _iter77)
                    {
                      oprot.writeDouble(_iter78);
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWeight_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<List<Double>>>(_list79.size);
            List<List<Double>> _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              {
                org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                _elem80 = new ArrayList<List<Double>>(_list82.size);
                List<Double> _elem83;
                for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                {
                  {
                    org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                    _elem83 = new ArrayList<Double>(_list85.size);
                    double _elem86;
                    for (int _i87 = 0; _i87 < _list85.size; ++_i87)
                    {
                      _elem86 = iprot.readDouble();
                      _elem83.add(_elem86);
                    }
                  }
                  _elem80.add(_elem83);
                }
              }
              struct.success.add(_elem80);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBiase_args implements org.apache.thrift.TBase<getBiase_args, getBiase_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBiase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBiase_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBiase_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBiase_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBiase_args.class, metaDataMap);
    }

    public getBiase_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBiase_args(getBiase_args other) {
    }

    public getBiase_args deepCopy() {
      return new getBiase_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBiase_args)
        return this.equals((getBiase_args)that);
      return false;
    }

    public boolean equals(getBiase_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getBiase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBiase_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBiase_argsStandardSchemeFactory implements SchemeFactory {
      public getBiase_argsStandardScheme getScheme() {
        return new getBiase_argsStandardScheme();
      }
    }

    private static class getBiase_argsStandardScheme extends StandardScheme<getBiase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBiase_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBiase_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBiase_argsTupleSchemeFactory implements SchemeFactory {
      public getBiase_argsTupleScheme getScheme() {
        return new getBiase_argsTupleScheme();
      }
    }

    private static class getBiase_argsTupleScheme extends TupleScheme<getBiase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBiase_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBiase_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getBiase_result implements org.apache.thrift.TBase<getBiase_result, getBiase_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBiase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBiase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBiase_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBiase_resultTupleSchemeFactory());
    }

    public List<List<Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBiase_result.class, metaDataMap);
    }

    public getBiase_result() {
    }

    public getBiase_result(
      List<List<Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBiase_result(getBiase_result other) {
      if (other.isSetSuccess()) {
        List<List<Double>> __this__success = new ArrayList<List<Double>>(other.success.size());
        for (List<Double> other_element : other.success) {
          List<Double> __this__success_copy = new ArrayList<Double>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public getBiase_result deepCopy() {
      return new getBiase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<Double>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<Double> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<Double>>();
      }
      this.success.add(elem);
    }

    public List<List<Double>> getSuccess() {
      return this.success;
    }

    public getBiase_result setSuccess(List<List<Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBiase_result)
        return this.equals((getBiase_result)that);
      return false;
    }

    public boolean equals(getBiase_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBiase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBiase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBiase_resultStandardSchemeFactory implements SchemeFactory {
      public getBiase_resultStandardScheme getScheme() {
        return new getBiase_resultStandardScheme();
      }
    }

    private static class getBiase_resultStandardScheme extends StandardScheme<getBiase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBiase_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<List<Double>>(_list88.size);
                  List<Double> _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    {
                      org.apache.thrift.protocol.TList _list91 = iprot.readListBegin();
                      _elem89 = new ArrayList<Double>(_list91.size);
                      double _elem92;
                      for (int _i93 = 0; _i93 < _list91.size; ++_i93)
                      {
                        _elem92 = iprot.readDouble();
                        _elem89.add(_elem92);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBiase_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (List<Double> _iter94 : struct.success)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter94.size()));
                for (double _iter95 : _iter94)
                {
                  oprot.writeDouble(_iter95);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBiase_resultTupleSchemeFactory implements SchemeFactory {
      public getBiase_resultTupleScheme getScheme() {
        return new getBiase_resultTupleScheme();
      }
    }

    private static class getBiase_resultTupleScheme extends TupleScheme<getBiase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBiase_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (List<Double> _iter96 : struct.success)
            {
              {
                oprot.writeI32(_iter96.size());
                for (double _iter97 : _iter96)
                {
                  oprot.writeDouble(_iter97);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBiase_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list98 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.success = new ArrayList<List<Double>>(_list98.size);
            List<Double> _elem99;
            for (int _i100 = 0; _i100 < _list98.size; ++_i100)
            {
              {
                org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem99 = new ArrayList<Double>(_list101.size);
                double _elem102;
                for (int _i103 = 0; _i103 < _list101.size; ++_i103)
                {
                  _elem102 = iprot.readDouble();
                  _elem99.add(_elem102);
                }
              }
              struct.success.add(_elem99);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class learningPhase2_args implements org.apache.thrift.TBase<learningPhase2_args, learningPhase2_args._Fields>, java.io.Serializable, Cloneable, Comparable<learningPhase2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learningPhase2_args");

    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField BOARD_FIELD_DESC = new org.apache.thrift.protocol.TField("board", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learningPhase2_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learningPhase2_argsTupleSchemeFactory());
    }

    public List<List<Double>> result; // required
    public List<List<Short>> board; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESULT((short)1, "result"),
      BOARD((short)2, "board");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESULT
            return RESULT;
          case 2: // BOARD
            return BOARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.BOARD, new org.apache.thrift.meta_data.FieldMetaData("board", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learningPhase2_args.class, metaDataMap);
    }

    public learningPhase2_args() {
    }

    public learningPhase2_args(
      List<List<Double>> result,
      List<List<Short>> board)
    {
      this();
      this.result = result;
      this.board = board;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learningPhase2_args(learningPhase2_args other) {
      if (other.isSetResult()) {
        List<List<Double>> __this__result = new ArrayList<List<Double>>(other.result.size());
        for (List<Double> other_element : other.result) {
          List<Double> __this__result_copy = new ArrayList<Double>(other_element);
          __this__result.add(__this__result_copy);
        }
        this.result = __this__result;
      }
      if (other.isSetBoard()) {
        List<List<Short>> __this__board = new ArrayList<List<Short>>(other.board.size());
        for (List<Short> other_element : other.board) {
          List<Short> __this__board_copy = new ArrayList<Short>(other_element);
          __this__board.add(__this__board_copy);
        }
        this.board = __this__board;
      }
    }

    public learningPhase2_args deepCopy() {
      return new learningPhase2_args(this);
    }

    @Override
    public void clear() {
      this.result = null;
      this.board = null;
    }

    public int getResultSize() {
      return (this.result == null) ? 0 : this.result.size();
    }

    public java.util.Iterator<List<Double>> getResultIterator() {
      return (this.result == null) ? null : this.result.iterator();
    }

    public void addToResult(List<Double> elem) {
      if (this.result == null) {
        this.result = new ArrayList<List<Double>>();
      }
      this.result.add(elem);
    }

    public List<List<Double>> getResult() {
      return this.result;
    }

    public learningPhase2_args setResult(List<List<Double>> result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    public int getBoardSize() {
      return (this.board == null) ? 0 : this.board.size();
    }

    public java.util.Iterator<List<Short>> getBoardIterator() {
      return (this.board == null) ? null : this.board.iterator();
    }

    public void addToBoard(List<Short> elem) {
      if (this.board == null) {
        this.board = new ArrayList<List<Short>>();
      }
      this.board.add(elem);
    }

    public List<List<Short>> getBoard() {
      return this.board;
    }

    public learningPhase2_args setBoard(List<List<Short>> board) {
      this.board = board;
      return this;
    }

    public void unsetBoard() {
      this.board = null;
    }

    /** Returns true if field board is set (has been assigned a value) and false otherwise */
    public boolean isSetBoard() {
      return this.board != null;
    }

    public void setBoardIsSet(boolean value) {
      if (!value) {
        this.board = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((List<List<Double>>)value);
        }
        break;

      case BOARD:
        if (value == null) {
          unsetBoard();
        } else {
          setBoard((List<List<Short>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESULT:
        return getResult();

      case BOARD:
        return getBoard();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESULT:
        return isSetResult();
      case BOARD:
        return isSetBoard();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learningPhase2_args)
        return this.equals((learningPhase2_args)that);
      return false;
    }

    public boolean equals(learningPhase2_args that) {
      if (that == null)
        return false;

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      boolean this_present_board = true && this.isSetBoard();
      boolean that_present_board = true && that.isSetBoard();
      if (this_present_board || that_present_board) {
        if (!(this_present_board && that_present_board))
          return false;
        if (!this.board.equals(that.board))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_result = true && (isSetResult());
      list.add(present_result);
      if (present_result)
        list.add(result);

      boolean present_board = true && (isSetBoard());
      list.add(present_board);
      if (present_board)
        list.add(board);

      return list.hashCode();
    }

    @Override
    public int compareTo(learningPhase2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBoard()).compareTo(other.isSetBoard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.board, other.board);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learningPhase2_args(");
      boolean first = true;

      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("board:");
      if (this.board == null) {
        sb.append("null");
      } else {
        sb.append(this.board);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learningPhase2_argsStandardSchemeFactory implements SchemeFactory {
      public learningPhase2_argsStandardScheme getScheme() {
        return new learningPhase2_argsStandardScheme();
      }
    }

    private static class learningPhase2_argsStandardScheme extends StandardScheme<learningPhase2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learningPhase2_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.result = new ArrayList<List<Double>>(_list104.size);
                  List<Double> _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    {
                      org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                      _elem105 = new ArrayList<Double>(_list107.size);
                      double _elem108;
                      for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                      {
                        _elem108 = iprot.readDouble();
                        _elem105.add(_elem108);
                      }
                      iprot.readListEnd();
                    }
                    struct.result.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BOARD
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.board = new ArrayList<List<Short>>(_list110.size);
                  List<Short> _elem111;
                  for (int _i112 = 0; _i112 < _list110.size; ++_i112)
                  {
                    {
                      org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
                      _elem111 = new ArrayList<Short>(_list113.size);
                      short _elem114;
                      for (int _i115 = 0; _i115 < _list113.size; ++_i115)
                      {
                        _elem114 = iprot.readI16();
                        _elem111.add(_elem114);
                      }
                      iprot.readListEnd();
                    }
                    struct.board.add(_elem111);
                  }
                  iprot.readListEnd();
                }
                struct.setBoardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learningPhase2_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.result.size()));
            for (List<Double> _iter116 : struct.result)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter116.size()));
                for (double _iter117 : _iter116)
                {
                  oprot.writeDouble(_iter117);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.board != null) {
          oprot.writeFieldBegin(BOARD_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.board.size()));
            for (List<Short> _iter118 : struct.board)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, _iter118.size()));
                for (short _iter119 : _iter118)
                {
                  oprot.writeI16(_iter119);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learningPhase2_argsTupleSchemeFactory implements SchemeFactory {
      public learningPhase2_argsTupleScheme getScheme() {
        return new learningPhase2_argsTupleScheme();
      }
    }

    private static class learningPhase2_argsTupleScheme extends TupleScheme<learningPhase2_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learningPhase2_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResult()) {
          optionals.set(0);
        }
        if (struct.isSetBoard()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResult()) {
          {
            oprot.writeI32(struct.result.size());
            for (List<Double> _iter120 : struct.result)
            {
              {
                oprot.writeI32(_iter120.size());
                for (double _iter121 : _iter120)
                {
                  oprot.writeDouble(_iter121);
                }
              }
            }
          }
        }
        if (struct.isSetBoard()) {
          {
            oprot.writeI32(struct.board.size());
            for (List<Short> _iter122 : struct.board)
            {
              {
                oprot.writeI32(_iter122.size());
                for (short _iter123 : _iter122)
                {
                  oprot.writeI16(_iter123);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learningPhase2_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.result = new ArrayList<List<Double>>(_list124.size);
            List<Double> _elem125;
            for (int _i126 = 0; _i126 < _list124.size; ++_i126)
            {
              {
                org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _elem125 = new ArrayList<Double>(_list127.size);
                double _elem128;
                for (int _i129 = 0; _i129 < _list127.size; ++_i129)
                {
                  _elem128 = iprot.readDouble();
                  _elem125.add(_elem128);
                }
              }
              struct.result.add(_elem125);
            }
          }
          struct.setResultIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
            struct.board = new ArrayList<List<Short>>(_list130.size);
            List<Short> _elem131;
            for (int _i132 = 0; _i132 < _list130.size; ++_i132)
            {
              {
                org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
                _elem131 = new ArrayList<Short>(_list133.size);
                short _elem134;
                for (int _i135 = 0; _i135 < _list133.size; ++_i135)
                {
                  _elem134 = iprot.readI16();
                  _elem131.add(_elem134);
                }
              }
              struct.board.add(_elem131);
            }
          }
          struct.setBoardIsSet(true);
        }
      }
    }

  }

  public static class learningPhase2_result implements org.apache.thrift.TBase<learningPhase2_result, learningPhase2_result._Fields>, java.io.Serializable, Cloneable, Comparable<learningPhase2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("learningPhase2_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new learningPhase2_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new learningPhase2_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(learningPhase2_result.class, metaDataMap);
    }

    public learningPhase2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public learningPhase2_result(learningPhase2_result other) {
    }

    public learningPhase2_result deepCopy() {
      return new learningPhase2_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof learningPhase2_result)
        return this.equals((learningPhase2_result)that);
      return false;
    }

    public boolean equals(learningPhase2_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(learningPhase2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("learningPhase2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class learningPhase2_resultStandardSchemeFactory implements SchemeFactory {
      public learningPhase2_resultStandardScheme getScheme() {
        return new learningPhase2_resultStandardScheme();
      }
    }

    private static class learningPhase2_resultStandardScheme extends StandardScheme<learningPhase2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, learningPhase2_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, learningPhase2_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class learningPhase2_resultTupleSchemeFactory implements SchemeFactory {
      public learningPhase2_resultTupleScheme getScheme() {
        return new learningPhase2_resultTupleScheme();
      }
    }

    private static class learningPhase2_resultTupleScheme extends TupleScheme<learningPhase2_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, learningPhase2_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, learningPhase2_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class initial_args implements org.apache.thrift.TBase<initial_args, initial_args._Fields>, java.io.Serializable, Cloneable, Comparable<initial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initial_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initial_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_args.class, metaDataMap);
    }

    public initial_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_args(initial_args other) {
    }

    public initial_args deepCopy() {
      return new initial_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initial_args)
        return this.equals((initial_args)that);
      return false;
    }

    public boolean equals(initial_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(initial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initial_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_argsStandardSchemeFactory implements SchemeFactory {
      public initial_argsStandardScheme getScheme() {
        return new initial_argsStandardScheme();
      }
    }

    private static class initial_argsStandardScheme extends StandardScheme<initial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_argsTupleSchemeFactory implements SchemeFactory {
      public initial_argsTupleScheme getScheme() {
        return new initial_argsTupleScheme();
      }
    }

    private static class initial_argsTupleScheme extends TupleScheme<initial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class initial_result implements org.apache.thrift.TBase<initial_result, initial_result._Fields>, java.io.Serializable, Cloneable, Comparable<initial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("initial_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new initial_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new initial_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(initial_result.class, metaDataMap);
    }

    public initial_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public initial_result(initial_result other) {
    }

    public initial_result deepCopy() {
      return new initial_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof initial_result)
        return this.equals((initial_result)that);
      return false;
    }

    public boolean equals(initial_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(initial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("initial_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class initial_resultStandardSchemeFactory implements SchemeFactory {
      public initial_resultStandardScheme getScheme() {
        return new initial_resultStandardScheme();
      }
    }

    private static class initial_resultStandardScheme extends StandardScheme<initial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, initial_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, initial_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class initial_resultTupleSchemeFactory implements SchemeFactory {
      public initial_resultTupleScheme getScheme() {
        return new initial_resultTupleScheme();
      }
    }

    private static class initial_resultTupleScheme extends TupleScheme<initial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, initial_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
